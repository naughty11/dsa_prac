#include <iostream>
using namespace std;

const int MAX = 20; // Maximum number of vertices

// Node structure of Graph
struct node {
    node *next;
    int vertex;
};

// Graph ADT
class graph {
public:
    node *G[MAX]; // Heads of the linked list

    // Constructor
    graph() {
        for (int i = 0; i < MAX; i++) {
            G[i] = NULL;
        }
    }

    // Insert an edge (vi, vj)
    void insert(int vi, int vj) {
        node *p, *q;
        q = new node;
        q->vertex = vj;
        q->next = NULL;

        if (G[vi] == NULL) // Insert the node in the linked list for the vertex no. vi
            G[vi] = q;
        else {
            // Go to the end of linked list
            p = G[vi];
            while (p->next != NULL)
                p = p->next;
            p->next = q;
        }
    }

    // Display Adjacency List
    void Display() {
        node *p;
        for (int i = 0; i < MAX; i++) {
            if (G[i] != NULL) {
                cout << i << " ";
                p = G[i];
                while (p != NULL) {
                    cout << p->vertex << " ";
                    p = p->next;
                }
            }
            cout << endl;
        }
    }
};

int main() {
    graph g;
    char ch;
    int vi, vj;

    do {
        cout << "\nEnter an edge (u,v): ";
        cin >> vi >> vj;
        g.insert(vi, vj);
        g.insert(vj, vi); // Undirected graph, so insert both ways

        cout << "Do you want to continue? (y/n): ";
        cin >> ch;
    } while (ch != 'n');

    cout << "\nAdjacency List of the graph:\n";
    g.Display();

    return 0;
}
